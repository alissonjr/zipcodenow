{"version":3,"sources":["zipcodenow.js"],"names":["zipCodeNow","wikipediaData","city","city_name","localidade","Promise","resolve","reject","fetch","then","response","status","json","data","wikipedia","about","link","catch","error","cepData","cep","find","res"],"mappings":";;AAAA;;;;AAIA,IAAIA,aAAc,YAAM;;AAEtB;;;;AAIA,WAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,QAAIC,YAAYD,KAAKE,UAArB;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,yFAAiFL,SAAjF,2BAAkHM,IAAlH,CAAuH,UAACC,QAAD,EAAc;AACnI,YAAIA,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BD,mBAASE,IAAT,GAAgBH,IAAhB,CAAqB,UAACI,IAAD,EAAU;AAC7BX,iBAAKY,SAAL,GAAiB;AACfC,qBAAOF,KAAK,CAAL,EAAQ,CAAR,CADQ;AAEfG,oBAAMH,KAAK,CAAL,EAAQ,CAAR;AAFS,aAAjB;AAIAP,oBAAQJ,IAAR;AACD,WAND;AAOD;AACF,OAVD,EAUGe,KAVH,CAUS,UAACC,KAAD,EAAW;AAClBX,eAAOW,KAAP;AACD,OAZD;AAaD,KAdM,CAAP;AAgBD;;AAED,WAASC,OAAT,CAAiBC,GAAjB,EAAsB,CAErB;;AAED,SAAO;;AAELC,UAAM,cAACD,GAAD,EAAS;AACb,aAAO,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtCC,sCAA4BY,GAA5B,aAAyCX,IAAzC,CAA8C,UAACC,QAAD,EAAc;AAC1D,cAAIA,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BD,qBAASE,IAAT,GAAgBH,IAAhB,CAAqB,UAACI,IAAD,EAAU;AAC7BZ,4BAAcY,IAAd,EAAoBJ,IAApB,CAAyB,UAACa,GAAD,EAAS;AAChChB,wBAAQgB,GAAR;AACD,eAFD;AAGD,aAJD;AAKD,WAND,MAMO;AACLf,mBAAO,EAACW,OAAO,IAAR,EAAP;AACD;AACF,SAVD,EAUGD,KAVH,CAUS,UAACC,KAAD,EAAW;AAClBX,iBAAOW,KAAP;AACD,SAZD;AAcD,OAhBM,CAAP;AAiBD;;AApBI,GAAP;AAwBD,CAtDgB,EAAjB","file":"zipcodenow.js","sourcesContent":["/**\r\n  @author Alisson Costa de Oliveira JÃºnior <alisson.coj@hotmail.com>\r\n  @desc Buscador de dados de uma localidade a partir do zipcode\r\n*/\r\nlet zipCodeNow = (() => {\r\n\r\n  /**\r\n  * @desc faz a pesquisa sobre a cidade junto ao wikipedia\r\n  * @param {String} city_name - nome da cidade a ser pesquisada\r\n  */\r\n  function wikipediaData(city) {\r\n    let city_name = city.localidade;\r\n    return new Promise((resolve, reject) => {\r\n      fetch(`https://pt.wikipedia.org/w/api.php?action=opensearch&format=json&search=${city_name}&namespace=0&limit=1`).then((response) => {\r\n        if (response.status === 200) {\r\n          response.json().then((data) => {\r\n            city.wikipedia = {\r\n              about: data[2][0],\r\n              link: data[3][0]\r\n            };\r\n            resolve(city);\r\n          });\r\n        }\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  function cepData(cep) {\r\n\r\n  }\r\n\r\n  return {\r\n\r\n    find: (cep) => {\r\n      return new Promise((resolve, reject) => {\r\n\r\n        fetch(`//viacep.com.br/ws/${cep}/json/`).then((response) => {\r\n          if (response.status === 200) {\r\n            response.json().then((data) => {\r\n              wikipediaData(data).then((res) => {\r\n                resolve(res);\r\n              });\r\n            });\r\n          } else {\r\n            reject({error: true});\r\n          }\r\n        }).catch((error) => {\r\n          reject(error);\r\n        });\r\n\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n})();\r\n"]}