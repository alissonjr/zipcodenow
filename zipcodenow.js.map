{"version":3,"sources":["zipcodenow.js"],"names":["zipCodeNow","wikipediaData","city","Promise","resolve","reject","city_name","localidade","fetch","then","response","status","console","log","json","data","wikipedia","about","link","catch","cepData","cep","error","find"],"mappings":";;AAAA;;;;AAIA,IAAMA,aAAc,YAAM;;AAExB;;;;AAIA,WAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIC,YAAYJ,KAAKK,UAArB;AACAC,yFAAiFF,SAAjF,2BAAkHG,IAAlH,CAAuH,UAACC,QAAD,EAAc;AACnI,YAAIA,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,kBAAQC,GAAR,CAAYH,QAAZ;AACAA,mBAASI,IAAT,GAAgBL,IAAhB,CAAqB,UAACM,IAAD,EAAU;AAC7Bb,iBAAKc,SAAL,GAAiB;AACfC,qBAAOF,KAAK,CAAL,EAAQ,CAAR,CADQ;AAEfG,oBAAMH,KAAK,CAAL,EAAQ,CAAR;AAFS,aAAjB;AAIAX,oBAAQF,IAAR;AACD,WAND;AAOD,SATD,MASO;AACLE,kBAAQF,IAAR;AACD;AACF,OAbD,EAaGiB,KAbH,CAaS,YAAM;AACbf,gBAAQF,IAAR;AACD,OAfD;AAgBD,KAlBM,CAAP;AAoBD;;AAED;;;;AAIA,WAASkB,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,WAAO,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCG,oCAA4Ba,GAA5B,aAAyCZ,IAAzC,CAA8C,UAACC,QAAD,EAAc;AAC1D,YAAIA,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BD,mBAASI,IAAT,GAAgBL,IAAhB,CAAqB,UAACM,IAAD,EAAU;AAC7BX,oBAAQW,IAAR;AACD,WAFD;AAGD,SAJD,MAIO;AACLV,iBAAO,EAACiB,OAAO,IAAR,EAAP;AACD;AACF,OARD,EAQGH,KARH,CAQS,UAACG,KAAD,EAAW;AAClBjB,eAAOiB,KAAP;AACD,OAVD;AAYD,KAbM,CAAP;AAcD;;AAED,SAAO;;AAELC,UAAM,cAACF,GAAD;AAAA,aAASD,QAAQC,GAAR,EAAaZ,IAAb,CAAkBR,aAAlB,EAAiCQ,IAAjC,CAAsC,UAACC,QAAD;AAAA,eAAcA,QAAd;AAAA,OAAtC,CAAT;AAAA;;AAFD,GAAP;AAMD,CAxDkB,EAAnB","file":"zipcodenow.js","sourcesContent":["/**\r\n  @author Alisson Costa de Oliveira JÃºnior <alisson.coj@hotmail.com>\r\n  @desc Buscador de dados de uma localidade a partir do zipcode\r\n*/\r\nconst zipCodeNow = (() => {\n\r\n  /**\r\n  * @desc faz a pesquisa sobre a cidade junto ao wikipedia\r\n  * @param {String} city_name - nome da cidade a ser pesquisada\r\n  */\r\n  function wikipediaData(city) {\r\n    return new Promise((resolve, reject) => {\r\n      let city_name = city.localidade;\r\n      fetch(`https://pt.wikipedia.org/w/api.php?action=opensearch&format=json&search=${city_name}&namespace=0&limit=1`).then((response) => {\r\n        if (response.status === 200) {\r\n          console.log(response);\r\n          response.json().then((data) => {\r\n            city.wikipedia = {\r\n              about: data[2][0],\r\n              link: data[3][0]\r\n            };\r\n            resolve(city);\r\n          });\r\n        } else {\r\n          resolve(city);\r\n        }\r\n      }).catch(() => {\r\n        resolve(city);\r\n      });\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * @desc faz a pesquisa sobre a cidade junto ao wikipedia\r\n  * @param {String} city_name - nome da cidade a ser pesquisada\r\n  */\r\n  function cepData(cep) {\r\n    return new Promise((resolve, reject) => {\r\n      fetch(`//viacep.com.br/ws/${cep}/json/`).then((response) => {\r\n        if (response.status === 200) {\r\n          response.json().then((data) => {\r\n            resolve(data);\r\n          });\r\n        } else {\r\n          reject({error: true});\r\n        }\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  return {\r\n\r\n    find: (cep) => cepData(cep).then(wikipediaData).then((response) => response)\r\n\r\n  };\r\n\r\n})();\r\n"]}